
//Punto 1
@1978
D=A

//Punto 2
@69
D=A
@100
M=D

//Punto 3
@24
D=M
@200

//punto 4
@100  
D=M  
@15  
D=D-A  
@100  
M=D   
 
//punto 5 
@0  
D=M  
@1  
D=D+M  
@69  
D=D+A  
@2  
M=D   
 
//punto 6
D;JEQ   
 
//punto 7 
@100  
D=M  
@100  
D=D-A  
@20  
D;JLT  
 
//punto 8
@var1
D=M
@var2
D=D+M
@var3
M=D

//punto 9
**¿Qué hace este programa?**  
Inicializa la variable i con el valor 1 y la variable sum con el valor 0, luego suma el valor de i a sum.

**¿En qué parte de la memoria RAM está la variable i y sum? ¿Por qué en esas posiciones?**  
Son variables definidas por el usuario, se almacenan a partir de la RAM 16 en adelante; por eso i está en la dirección 16 y sum en la 17.

**Optimiza esta parte del código para que use solo dos instrucciones:**  
@i
M=M+1
 
//punto 10
@R0
D=M
@1
M=D+D
 
//punto 11
// i=1000
@1000
D=A
@M=D
(LOOP)
// if (i==0) goto CONT
@i
D=M
@CONT
D;JEQ
// i=i-1
@i
M=M-1
// goto LOOP
@LOOP
0;JMP
(CONT)

**¿Qué hace este programa?**
Cuenta regresiva desde 1000 hasta 0, deteniéndose cuando i es 0.

**¿En qué memoria está almacenada la variable i? ¿En qué dirección?**
En la RAM, cuando es asignada a i empezando en 16.

**¿En qué memoria y dirección está el comentario // i = 1000?**
Los comentarios no se almacenan en memoria, solo son visibles para los humanos.

**¿Cuál es la primera instrucción y en qué memoria/dirección está?**
La instrucción inicial es @1000 y se guarda en la memoria ROM en la dirección 0.

**¿Qué son CONT y LOOP?**
Son etiquetas usadas para saltos, sirven para marcar posiciones en el código.

**¿Cuál es la diferencia entre los símbolos i y CONT?**
i es una variable en RAM y CONT es una etiqueta de salto en ROM.

//punto 12
@1
D=M
@2
D=D+M
@69
D=D+A
@4
M=D

//punto 13
@0
D=M
@SET_POS
D;JGE
@1
M=-1
@LOOP
0;JMP
(SET_POS)
@1
M=1
(LOOP)
@LOOP
0;JMP

//punto 14
@1
D=M
@R13
M=D
@R13
A=M
D=M
@4
M=D

//punto 15
@R0
D=M
@START
M=D
@R1
D=M
@END
M=D
@COUNT
M=0
(LOOP)
@COUNT
D=M
@END
D=D-M
@STOP
D;JEQ
@START
A=M
M=-1
@START
D=M
@1
D=D+1
@START
M=D
@COUNT
D=M
@1
D=D+1
@COUNT
M=D
@LOOP
0;JMP
(STOP)
@STOP
0;JMP

//punto 16
@0
M=0
@0
D=A
@R1
M=D
(LOOP)
@R1
D=M
@10
D=D-A
@END
D;JGE
@R1
D=M
@200
A=D+A
D=M
@0
M=D+M
@R1
M=M+1
@LOOP
0;JMP
(END)
@END
0;JMP

//punto 17
@7
D=D-A
@69
D;JEQ

//punto 18
![Imagen](https://cdn.discordapp.com/attachments/796218259526909974/1399235140265181246/Captura_Pulgar.jpg?ex=688842c5&is=6886f145&hm=194a44c73c9ceb0c1e4618f2b17ef04f02431e2a3770c64a406211fe5ae936f5&)


//punto 19
**¿Que hace este Programa?**
Cuando dejas presionada una tecla, la pantalla se empieza a llenar poco a poco con luces encendidas, desde el principio hasta el final. Y cuando sueltas la tecla, esas luces se apagan en orden inverso, como si se vaciara. Es un efecto visual de "llenar y vaciar" que se maneja con el teclado.

//punto 20
```asm
@KBD
D=M
@DRAW
D;JEQ
@KBD
D=M
@100
D=D-A
@END
D;JNE
(DRAW)
@SCREEN
D=A
@R12
AD=D+M
@28
D=D+A
A=D-A
M=D-A
D=A
@32
AD=D+A
@38
D=D+A
A=D-A
M=D-A
D=A
@32
AD=D+A
@99
D=D+A
A=D-A
M=D-A
D=A
@32
AD=D+A
@65
D=D+A
A=D-A
M=D-A
D=A
@32
AD=D+A
@65
D=D+A
A=D-A
M=D-A
D=A
@32
AD=D+A
@28865
D=D+A
A=D-A
M=D-A
D=A
@32
AD=D+A
@24959
D=D+A
A=D-A
M=A-D
D=A
@32
AD=D+A
@31869
D=D+A
A=D-A
M=A-D
D=A
@32
AD=D+A
@32574
D=D+A
A=D-A
M=A-D
D=A
@32
AD=D+A
@8142
D=D+A
A=D-A
M=A-D
AD=A+1
@3
D=D+A
A=D-A
M=D-A
D=A
@31
AD=D+A
@14354
D=D+A
A=D-A
M=D-A
AD=A+1
@2
D=D+A
A=D-A
M=D-A
D=A
@31
AD=D+A
@3606
D=D+A
A=D-A
M=D-A
AD=A+1
@7
D=D+A
A=D-A
M=D-A
D=A
@31
AD=D+A
@32284
D=D+A
A=D-A
M=A-D
AD=A+1
@5
D=D+A
A=D-A
M=D-A
D=A
@31
AD=D+A
@16316
D=D+A
A=D-A
M=A-D
AD=A+1
@4
D=D+A
A=D-A
M=D-A
D=A
@31
AD=D+A
@28708
D=D+A
A=D-A
M=D-A
AD=A+1
@4
D=D+A
A=D-A
M=D-A
D=A
@31
AD=D+A
@7276
D=D+A
A=D-A
M=D-A
AD=A+1
@6
D=D+A
A=D-A
M=D-A
D=A
@31
AD=D+A
@1992
D=D+A
A=D-A
M=D-A
AD=A+1
@3
D=D+A
A=D-A
M=D-A
D=A
@31
AD=D+A
@32488
D=D+A
A=D-A
M=A-D
AD=A+1
M=1
D=A
@31
AD=D+A
@7920
D=D+A
A=D-A
M=A-D
D=A
@32
AD=D+A
@15888
D=D+A
A=D-A
M=D-A
D=A
@32
AD=D+A
@8240
D=D+A
A=D-A
M=D-A
D=A
@32
AD=D+A
@8224
D=D+A
A=D-A
M=D-A
D=A
@32
AD=D+A
@24608
D=D+A
A=D-A
M=D-A
D=A
@32
AD=D+A
@16416
D=D+A
A=D-A
M=D-A
@R13
A=M
D;JMP
(END)
@END
0;JMP
```
